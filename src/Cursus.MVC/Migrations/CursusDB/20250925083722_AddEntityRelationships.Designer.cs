// <auto-generated />
using System;
using Cursus.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cursus.MVC.Migrations.CursusDB
{
    [DbContext(typeof(CursusDBContext))]
    [Migration("20250925083722_AddEntityRelationships")]
    partial class AddEntityRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseDiscount", b =>
                {
                    b.Property<int>("CoursesCourseId")
                        .HasColumnType("int");

                    b.Property<string>("DiscountsDiscountId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CoursesCourseId", "DiscountsDiscountId");

                    b.HasIndex("DiscountsDiscountId");

                    b.ToTable("CourseDiscounts", (string)null);
                });

            modelBuilder.Entity("Cursus.Domain.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Money")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UpLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Cursus.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Cursus.Domain.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("CartMoney")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("AccountId1");

                    b.HasIndex("CourseId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Comment", b =>
                {
                    b.Property<int>("CmtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CmtId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CmtContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CmtDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CmtLevel")
                        .HasColumnType("int");

                    b.Property<string>("CmtReply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LessionId")
                        .HasColumnType("int");

                    b.HasKey("CmtId");

                    b.HasIndex("AccountId1");

                    b.HasIndex("LessionId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CourseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CourseMoney")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseProcess")
                        .HasColumnType("int");

                    b.Property<string>("CourseRequirement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseShortDes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseWlearn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CourseId");

                    b.HasIndex("AccountId1");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Discount", b =>
                {
                    b.Property<string>("DiscountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsActive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Enroll", b =>
                {
                    b.Property<int>("EnrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("EnrollBlock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnrollDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnrollFinish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnrollStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnrollId");

                    b.HasIndex("AccountId1");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrolls");
                });

            modelBuilder.Entity("Cursus.Domain.Models.InstructorSubscription", b =>
                {
                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubscriptionCount")
                        .HasColumnType("int");

                    b.HasKey("InstructorId");

                    b.ToTable("InstructorSubscriptions");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Lesson", b =>
                {
                    b.Property<int>("LessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessionId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("LessionComments")
                        .HasColumnType("int");

                    b.Property<string>("LessionContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LessionFinish")
                        .HasColumnType("int");

                    b.Property<string>("LessionImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessionTilte")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessionVideo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessionId");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Otp", b =>
                {
                    b.Property<int>("OtpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OtpId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OtpCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OtpCreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OtpExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtpIsUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OtpId");

                    b.HasIndex("AccountId1");

                    b.ToTable("Otps");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Progress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressId"));

                    b.Property<string>("AccId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Finish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.HasKey("ProgressId");

                    b.HasIndex("AccId");

                    b.HasIndex("LessonId");

                    b.ToTable("Progresses");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Rate", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RateId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("RateContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RatePoint")
                        .HasColumnType("int");

                    b.HasKey("RateId");

                    b.HasIndex("AccountId1");

                    b.HasIndex("CourseId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CmtId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportReasson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CmtId");

                    b.HasIndex("CourseId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Subscribe", b =>
                {
                    b.Property<int>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubId"));

                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscribes");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Trading", b =>
                {
                    b.Property<int>("TdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TdId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TdMethodPayment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TdMoney")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TdId");

                    b.ToTable("Tradings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CourseDiscount", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cursus.Domain.Models.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsDiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cursus.Domain.Models.Cart", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Account", "Account")
                        .WithMany("Carts")
                        .HasForeignKey("AccountId1");

                    b.HasOne("Cursus.Domain.Models.Course", "Course")
                        .WithMany("Carts")
                        .HasForeignKey("CourseId");

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Comment", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Account", "Account")
                        .WithMany("Commnents")
                        .HasForeignKey("AccountId1");

                    b.HasOne("Cursus.Domain.Models.Lesson", "Lession")
                        .WithMany("Commnents")
                        .HasForeignKey("LessionId");

                    b.Navigation("Account");

                    b.Navigation("Lession");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Course", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Account", "Account")
                        .WithMany("Courses")
                        .HasForeignKey("AccountId1");

                    b.HasOne("Cursus.Domain.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Enroll", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Account", "Account")
                        .WithMany("Enrolls")
                        .HasForeignKey("AccountId1");

                    b.HasOne("Cursus.Domain.Models.Course", "Course")
                        .WithMany("Enrolls")
                        .HasForeignKey("CourseId");

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Cursus.Domain.Models.InstructorSubscription", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Account", "Instructor")
                        .WithOne()
                        .HasForeignKey("Cursus.Domain.Models.InstructorSubscription", "InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Lesson", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Otp", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Account", "Account")
                        .WithMany("Otps")
                        .HasForeignKey("AccountId1");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Progress", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Account", "Account")
                        .WithMany("Progresses")
                        .HasForeignKey("AccId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cursus.Domain.Models.Lesson", "Lesson")
                        .WithMany("Progresses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Rate", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Account", "Account")
                        .WithMany("Rates")
                        .HasForeignKey("AccountId1");

                    b.HasOne("Cursus.Domain.Models.Course", "Course")
                        .WithMany("Rates")
                        .HasForeignKey("CourseId");

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Report", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Account", "Account")
                        .WithMany("Reports")
                        .HasForeignKey("AccountId")
                        .HasPrincipalKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Cursus.Domain.Models.Comment", "Comment")
                        .WithMany("Reports")
                        .HasForeignKey("CmtId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Cursus.Domain.Models.Course", "Course")
                        .WithMany("Reports")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("Comment");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Subscribe", b =>
                {
                    b.HasOne("Cursus.Domain.Models.Account", "Instructor")
                        .WithMany("InstructorSubscriptions")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cursus.Domain.Models.Account", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Instructor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cursus.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cursus.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cursus.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cursus.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cursus.Domain.Models.Account", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Commnents");

                    b.Navigation("Courses");

                    b.Navigation("Enrolls");

                    b.Navigation("InstructorSubscriptions");

                    b.Navigation("Otps");

                    b.Navigation("Progresses");

                    b.Navigation("Rates");

                    b.Navigation("Reports");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Comment", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Course", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Enrolls");

                    b.Navigation("Lessons");

                    b.Navigation("Rates");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Cursus.Domain.Models.Lesson", b =>
                {
                    b.Navigation("Commnents");

                    b.Navigation("Progresses");
                });
#pragma warning restore 612, 618
        }
    }
}
